/*

-- What are the 5 oldest employees?

mysql> SELECT position, first_name, last_name, birth_date, CONCAT('$', CAST(wage AS DECIMAL(10, 2))) AS wage, address_line, city, us_state, zip 
FROM employees x 
INNER JOIN stores y ON x.store_id = y.store_id 
ORDER BY birth_date LIMIT 5;

+----------+------------+-----------+------------+--------+----------------------+------------+------------+-------+
| position | first_name | last_name | birth_date | wage   | address_line         | city       | us_state   | zip   |
+----------+------------+-----------+------------+--------+----------------------+------------+------------+-------+
| Manager  | Leopold    | Stotch    | 1960-09-24 | $56.50 | 1422 Electric Avenue | Cascade    | Arizona    | 58602 |
| Manager  | Mario      | Luigi     | 1970-04-24 | $55.00 | 8125 North Circle    | Toad Town  | California | 12586 |
| Cashier  | Victoria   | Johnson   | 1972-05-10 | $22.50 | 65135 Dodger Lane    | Funky Town | Arizona    | 59533 |
| Manager  | John       | Smith     | 1975-07-09 | $55.00 | 376 Green Lake Road  | Lake Leaf  | California | 12795 |
| Manager  | Eric       | Cartman   | 1976-11-10 | $56.00 | 416 Oak Drive        | West Park  | Nevada     | 30126 |
+----------+------------+-----------+------------+--------+----------------------+------------+------------+-------+


-- What are the 5 youngest employees? (Likely several ties due to no month in table, only birth year)

mysql> SELECT position, first_name, last_name, birth_date, CONCAT('$', CAST(wage AS DECIMAL(10, 2))) AS wage, address_line, city, us_state, zip 
FROM employees x 
INNER JOIN stores y ON x.store_id = y.store_id 
ORDER BY birth_date DESC LIMIT 5;
+----------------------+------------+------------+------------+--------+----------------------+-----------+------------+-------+
| position             | first_name | last_name  | birth_date | wage   | address_line         | city      | us_state   | zip   |
+----------------------+------------+------------+------------+--------+----------------------+-----------+------------+-------+
| Shipping & Receiving | Harry      | Armstrong  | 1996-04-17 | $19.25 | 376 Green Lake Road  | Lake Leaf | California | 12795 |
| Custodian            | Scruffy    | Farnsworth | 1995-11-02 | $17.00 | 8125 North Circle    | Toad Town | California | 12586 |
| Cashier              | Ava        | Liddel     | 1995-07-14 | $19.30 | 8125 North Circle    | Toad Town | California | 12586 |
| Cashier              | Jose       | Lopez      | 1994-09-27 | $18.70 | 1422 Electric Avenue | Cascade   | Arizona    | 58602 |
| Shipping & Receiving | Isaac      | Fuentes    | 1994-05-17 | $19.00 | 8125 North Circle    | Toad Town | California | 12586 |
+----------------------+------------+------------+------------+--------+----------------------+-----------+------------+-------+


--------------------------------------------------------------------------------------

How many employees born after 1990 are in each store?

mysql> SELECT s.store_id, address_line, city, us_state, zip, COUNT(*) AS Born_After_1990 
FROM stores AS s 
INNER JOIN employees AS e 
ON e.store_id = s.store_id 
WHERE YEAR(birth_date) > 1990 
GROUP BY s.store_id;
+----------+----------------------+------------+------------+-------+-----------------+
| store_id | address_line         | city       | us_state   | zip   | Born_After_1990 |
+----------+----------------------+------------+------------+-------+-----------------+
| 1217     | 8125 North Circle    | Toad Town  | California | 12586 |               5 |
| 1218     | 376 Green Lake Road  | Lake Leaf  | California | 12795 |               3 |
| 1258     | 1422 Electric Avenue | Cascade    | Arizona    | 58602 |               3 |
| 1259     | 65135 Dodger Lane    | Funky Town | Arizona    | 59533 |               1 |
| 1325     | 416 Oak Drive        | West Park  | Nevada     | 30126 |               2 |
+----------+----------------------+------------+------------+-------+-----------------+


------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
- SET operations on tables 'employees' and 'former_employees'
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

-- Show all current and former employees by first_name, last_name WITHOUT duplicates:

mysql> SELECT first_name, last_name 
FROM employees 
UNION 
SELECT first_name, last_name 
FROM former_employees;
+------------+------------+
| first_name | last_name  |
+------------+------------+
| Mario      | Luigi      |
| John       | Smith      |
| Leopold    | Stotch     |
| Stan       | Marsh      |
| Eric       | Cartman    |
| Scruffy    | Farnsworth |
| Michael    | Mosley     |
| Janice     | Wild       |
| Richard    | Hedburg    |
| Jonathan   | Smith      |
| Kerry      | Potter     |
| Sheila     | Brown      |
| Joseph     | Smith      |
| Michael    | Carpenter  |
| Juan       | Lopez      |
| Maria      | Perez      |
| Mike       | Shields    |
| Dat        | Phan       |
| Penelope   | Marley     |
| Leonard    | Newton     |
| Isaac      | Fuentes    |
| Harry      | Armstrong  |
| Colby      | Lewis      |
| Jeffery    | Jefferson  |
| Rachel     | Mathews    |
| Juan       | Donalds    |
| Markus     | Black      |
| Jose       | Lopez      |
| John       | White      |
| Veronica   | Smith      |
| Alice      | Armstrong  |
| Lewis      | Nabokov    |
| Joseph     | West       |
| Victoria   | Johnson    |
| Ella       | Carrols    |
| Ava        | Liddel     |
| Zachary    | Moretz     |
| Gregory    | Kuniz      |
| Selina     | Sutherland |
| Tiffany    | Carpenter  |
| Joseph     | Navarro    |
| Marcus     | Jackson    |
| Jarod      | Marklar    |
| Richard    | McDonald   |
| Richard    | Johnson    |
| Alice      | Carrol     |
+------------+------------+

------------------------------------------------------------------------------------

-- Show all employees current and former
-- (Show 'current' and 'former' employees as a new column for the following)

mysql> SELECT 'current' AS employee_status, first_name, last_name 
FROM employees 
UNION ALL 
SELECT 'former' AS employee_status, first_name, last_name 
FROM former_employees;
+-----------------+------------+------------+
| employee_status | first_name | last_name  |
+-----------------+------------+------------+
| current         | Mario      | Luigi      |
| current         | John       | Smith      |
| current         | Leopold    | Stotch     |
| current         | Stan       | Marsh      |
| current         | Eric       | Cartman    |
| current         | Scruffy    | Farnsworth |
| current         | Michael    | Mosley     |
| current         | Janice     | Wild       |
| current         | Richard    | Hedburg    |
| current         | Jonathan   | Smith      |
| current         | Kerry      | Potter     |
| current         | Sheila     | Brown      |
| current         | Joseph     | Smith      |
| current         | Michael    | Carpenter  |
| current         | Juan       | Lopez      |
| current         | Maria      | Perez      |
| current         | Mike       | Shields    |
| current         | Dat        | Phan       |
| current         | Penelope   | Marley     |
| current         | Leonard    | Newton     |
| current         | Isaac      | Fuentes    |
| current         | Harry      | Armstrong  |
| current         | Colby      | Lewis      |
| current         | Jeffery    | Jefferson  |
| current         | Rachel     | Mathews    |
| current         | Juan       | Donalds    |
| current         | Markus     | Black      |
| current         | Jose       | Lopez      |
| current         | John       | White      |
| current         | Veronica   | Smith      |
| current         | Alice      | Armstrong  |
| current         | Lewis      | Nabokov    |
| current         | Joseph     | West       |
| current         | Victoria   | Johnson    |
| current         | Ella       | Carrols    |
| current         | Ava        | Liddel     |
| current         | Zachary    | Moretz     |
| current         | Gregory    | Kuniz      |
| current         | Selina     | Sutherland |
| current         | Tiffany    | Carpenter  |
| former          | Mario      | Luigi      |
| former          | Joseph     | Navarro    |
| former          | Michael    | Mosley     |
| former          | Marcus     | Jackson    |
| former          | Jarod      | Marklar    |
| former          | Richard    | McDonald   |
| former          | Ava        | Liddel     |
| former          | Gregory    | Kuniz      |
| former          | Richard    | Johnson    |
| former          | Jonathan   | Smith      |
| former          | Alice      | Carrol     |
+-----------------+------------+------------+


------------------------------------------------------------------------------------

-- Show only duplicate employee names by first_name, last_name

mysql> SELECT first_name, last_name 
FROM employees 
INTERSECT 
SELECT first_name, last_name
FROM former_employees;
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| Mario      | Luigi     |
| Michael    | Mosley    |
| Jonathan   | Smith     |
| Ava        | Liddel    |
| Gregory    | Kuniz     |
+------------+-----------+

------------------------------------------------------------------------------------

-- All sales by same specific cashier:

mysql> SELECT s.sales_id, s.store_id, s.purch_date, s.quantity, e.emp_id, e.first_name, e.last_name 
FROM sales AS s 
INNER JOIN employees AS e ON s.emp_id= e.emp_id 
WHERE s.emp_id = '30037';
+----------+----------+------------+----------+--------+------------+-----------+
| sales_id | store_id | purch_date | quantity | emp_id | first_name | last_name |
+----------+----------+------------+----------+--------+------------+-----------+
| 20023    | 1218     | 03-23-2021 |        3 | 30037  | Zachary    | Moretz    |
| 20027    | 1218     | 06-01-2021 |        1 | 30037  | Zachary    | Moretz    |
| 20029    | 1218     | 09-15-2022 |        4 | 30037  | Zachary    | Moretz    |
| 20030    | 1218     | 11-07-2021 |        1 | 30037  | Zachary    | Moretz    |
+----------+----------+------------+----------+--------+------------+-----------+

--------------------------------------------------------------------------------------

-- Get amount sold by same cashier sortd by highest amount sold first (Where quantity matters)

mysql> SELECT SUM(s.quantity) AS NumberOfSales, e.emp_id, e.first_name, e.last_name 
FROM sales AS s 
INNER JOIN employees AS e ON s.emp_id = e.emp_id 
GROUP BY emp_id 
ORDER BY SUM(s.quantity) DESC;
+---------------+--------+------------+------------+
| NumberOfSales | emp_id | first_name | last_name  |
+---------------+--------+------------+------------+
|            16 | 30040  | Tiffany    | Carpenter  |
|            14 | 30032  | Lewis      | Nabokov    |
|            14 | 30030  | Veronica   | Smith      |
|            11 | 30033  | Joseph     | West       |
|            11 | 30036  | Ava        | Liddel     |
|            11 | 30028  | Jose       | Lopez      |
|             9 | 30026  | Juan       | Donalds    |
|             9 | 30037  | Zachary    | Moretz     |
|             9 | 30027  | Markus     | Black      |
|             8 | 30034  | Victoria   | Johnson    |
|             7 | 30039  | Selina     | Sutherland |
|             6 | 30035  | Ella       | Carrols    |
|             6 | 30029  | John       | White      |
|             5 | 30031  | Alice      | Armstrong  |
+---------------+--------+------------+------------+

-------------

-- Do same as previous, but instead of employees, see the amount sold at each store (Calculated with quantity)

mysql> SELECT SUM(s.quantity) AS NumberOfSales, st.store_id, st.city, st.us_state 
FROM sales AS s 
INNER JOIN stores AS st ON s.store_id = st.store_id 
GROUP BY store_id 
ORDER BY SUM(s.quantity) DESC;
+---------------+----------+------------+------------+
| NumberOfSales | store_id | city       | us_state   |
+---------------+----------+------------+------------+
|            36 | 1325     | West Park  | Nevada     |
|            32 | 1218     | Lake Leaf  | California |
|            25 | 1217     | Toad Town  | California |
|            22 | 1258     | Cascade    | Arizona    |
|            21 | 1259     | Funky Town | Arizona    |
+---------------+----------+------------+------------+

-------------------------------------------------------------------------

-- Get the number of days between the first sale and the most recent sale:

mysql> SELECT DATEDIFF(MAX(purch_date), MIN(purch_date)) 
AS Days_Between_First_And_Last_Sale 
FROM sales;
+----------------------------------+
| Days_Between_First_And_Last_Sale |
+----------------------------------+
|                             1048 |
+----------------------------------+

-------------------------------------------------------------------------

-- Get number of items sold each month and year, sort by most recent first
-- (Note: Due to the random setting up of the sales table, some months 'have no sales')
-- This store would have gone out of business ages ago...

mysql> SELECT 
	SUM(quantity) AS MonthlySales, MONTHNAME(purch_date) AS Month, 
	YEAR(purch_date) AS Year 
FROM sales 
GROUP BY Month, Year 
ORDER BY Year DESC;
+--------------+-----------+------+
| MonthlySales | Month     | Year |
+--------------+-----------+------+
|           12 | March     | 2022 |
|            6 | January   | 2022 |
|           12 | December  | 2022 |
|            6 | September | 2022 |
|            8 | February  | 2022 |
|            7 | August    | 2022 |
|            7 | August    | 2021 |
|            6 | September | 2021 |
|            5 | July      | 2021 |
|           13 | June      | 2021 |
|            6 | January   | 2021 |
|            1 | November  | 2021 |
|            3 | March     | 2021 |
|            2 | February  | 2021 |
|            4 | July      | 2020 |
|            2 | May       | 2020 |
|            9 | August    | 2020 |
|           13 | February  | 2020 |
|            6 | June      | 2020 |
|            8 | October   | 2020 |
+--------------+-----------+------+

---------------------------------------------------------------------------

-- What are the top 10 oldest employees by years, with their position, first name,
 last name, years old, and wages?

mysql> SELECT 
	position, first_name, last_name, 
	TIMESTAMPDIFF(YEAR, birth_date, NOW()) AS Years_Old, 
	CONCAT('$', CAST(wage AS DECIMAL(10, 2))) AS wage 
FROM employees
ORDER BY TIMESTAMPDIFF(YEAR, birth_date, NOW()) DESC 
LIMIT 10;
+----------------------+------------+-----------+-----------+--------+
| position             | first_name | last_name | Years_Old | wage   |
+----------------------+------------+-----------+-----------+--------+
| Manager              | Leopold    | Stotch    |        64 | $56.50 |
| Manager              | Mario      | Luigi     |        55 | $55.00 |
| Cashier              | Victoria   | Johnson   |        53 | $22.50 |
| Manager              | John       | Smith     |        50 | $55.00 |
| Manager              | Eric       | Cartman   |        48 | $56.00 |
| Cashier              | Ella       | Carrols   |        47 | $19.20 |
| Manager              | Stan       | Marsh     |        46 | $56.25 |
| Shipping & Receiving | Jeffery    | Jefferson |        44 | $20.25 |
| Shipping & Receiving | Mike       | Shields   |        42 | $19.30 |
| Shipping & Receiving | Dat        | Phan      |        42 | $19.35 |
+----------------------+------------+-----------+-----------+--------+

-- The same, as previous, but for youngest employees?

mysql> SELECT 
	position, first_name, last_name, 
	TIMESTAMPDIFF(YEAR, birth_date, NOW()) AS Years_Old, 
	CONCAT('$', CAST(wage AS DECIMAL(10, 2))) AS wage 
FROM employees 
ORDER BY TIMESTAMPDIFF(YEAR, birth_date, NOW()) 
LIMIT 10;
+----------------------+------------+------------+-----------+--------+
| position             | first_name | last_name  | Years_Old | wage   |
+----------------------+------------+------------+-----------+--------+
| Custodian            | Scruffy    | Farnsworth |        29 | $17.00 |
| Shipping & Receiving | Harry      | Armstrong  |        29 | $19.25 |
| Cashier              | Ava        | Liddel     |        30 | $19.30 |
| Cashier              | Jose       | Lopez      |        30 | $18.70 |
| Cashier              | Tiffany    | Carpenter  |        31 | $19.75 |
| Stocker              | Sheila     | Brown      |        31 | $16.50 |
| Shipping & Receiving | Isaac      | Fuentes    |        31 | $19.00 |
| Shipping & Receiving | Colby      | Lewis      |        32 | $19.30 |
| Cashier              | Alice      | Armstrong  |        32 | $18.75 |
| Custodian            | Jonathan   | Smith      |        32 | $17.10 |
+----------------------+------------+------------+-----------+--------+

-------------------------------------------------------------------------

-- List all the current employees that share the same birthday?

mysql> SELECT e1.first_name, e1.last_name, e1.birth_date 
FROM employees e1 
INNER JOIN employees e2 ON DATE_FORMAT(e1.birth_date, '%c %d') = DATE_FORMAT(e2.birth_date, '%c %d') 
AND e1.emp_id != e2.emp_id 
ORDER BY DATE_FORMAT(e1.birth_date, '%c %d');
+------------+------------+------------+
| first_name | last_name  | birth_date |
+------------+------------+------------+
| Tiffany    | Carpenter  | 1993-12-26 |
| Selina     | Sutherland | 1991-12-26 |
| Leonard    | Newton     | 1988-05-27 |
| Dat        | Phan       | 1983-05-27 |
| Juan       | Lopez      | 1989-06-10 |
| Michael    | Carpenter  | 1990-06-10 |
| Ava        | Liddel     | 1995-07-14 |
| Maria      | Perez      | 1990-07-14 |
+------------+------------+------------+

------------------------------------------------------------

-- Get the names and prices of all types of cheese along with their total prices

SELECT 
	item_name, 
	CONCAT('$', CAST(price AS DECIMAL(10, 2))) AS price, 
	CONCAT('$',
	CAST(SUM(price) OVER () AS DECIMAL(10, 2))) AS total_price 
FROM prices 
WHERE item_name LIKE '%cheese';
+-------------------+-------+-------------+
| item_name         | price | total_price |
+-------------------+-------+-------------+
| provolone cheese  | $5.78 | $36.15      |
| cheddar cheese    | $5.90 | $36.15      |
| mozarella cheese  | $6.10 | $36.15      |
| pepperjack cheese | $6.12 | $36.15      |
| cream cheese      | $6.20 | $36.15      |
| cottage cheese    | $6.05 | $36.15      |
+-------------------+-------+-------------+

----------------------------------------------------------------

-- Rank the sales of each item by total sales into 3 categories: Low, Medium, and High
-- (Output the item_id, item name, price, total sales and sales score)

mysql> WITH TotalSales AS (
	SELECT DISTINCT
		s.item_id, 
		item_name, 
		price, 
		SUM(quantity * price) OVER (PARTITION BY s.item_id) AS TotalSales 
	FROM sales s 
	INNER JOIN prices p ON s.item_id = p.item_id
), Buckets AS (
	SELECT 
		item_id, 
		item_name, 
		price, 
		TotalSales, 
		NTILE(3) OVER (ORDER BY TotalSales DESC) AS Buckets 
	FROM TotalSales) 
SELECT
	item_id, 
	item_name, 
	CONCAT('$', CAST(price AS DECIMAL(10, 2))) AS price, 
	CONCAT('$', CAST(TotalSales AS DECIMAL(10, 2))) AS TotalSales, 
	CASE 
		WHEN Buckets = 1 THEN 'High' 
		WHEN Buckets = 2 THEN 'Medium' 
		ELSE 'Low' 
	END AS SaleScore 
FROM Buckets;
+---------+-------------------------------+-------+------------+-----------+
| item_id | item_name                     | price | TotalSales | SaleScore |
+---------+-------------------------------+-------+------------+-----------+
| 122687  | salted butter                 | $6.74 | $101.10    | High      |
| 122693  | provolone cheese              | $5.78 | $86.70     | High      |
| 122699  | mozarella cheese              | $6.10 | $85.40     | High      |
| 122679  | peach yogurt                  | $4.45 | $80.10     | High      |
| 122710  | pepperjack cheese             | $6.12 | $79.56     | High      |
| 122689  | unsalted butter               | $6.50 | $71.50     | High      |
| 122685  | blueberry yogurt              | $4.45 | $71.20     | Medium    |
| 122686  | milk                          | $7.86 | $62.88     | Medium    |
| 123468  | mint chocolate chip ice cream | $8.95 | $44.75     | Medium    |
| 123457  | vanilla ice cream             | $8.80 | $26.40     | Medium    |
| 124565  | cottage cheese                | $6.05 | $24.20     | Medium    |
| 123484  | sour cream                    | $5.63 | $22.52     | Low       |
| 123485  | cream cheese                  | $6.20 | $18.60     | Low       |
| 123480  | rainbow sherbert ice cream    | $8.95 | $17.90     | Low       |
| 123456  | chocolate ice cream           | $8.90 | $17.80     | Low       |
| 122697  | cheddar cheese                | $5.90 | $17.70     | Low       |
+---------+-------------------------------+-------+------------+-----------+

   /\
  /  \
  (@_@)
  =\|/=
    |
    /\
AHA, POONSHKA!!!
(09-09-2025)
--stringzzz
----------------------------------------


*/