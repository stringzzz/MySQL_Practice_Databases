[INTRODUCTION]

Everything is data, large amounts of data can't be stored in just simple spreadsheets,
so we need databases to make it more efficient. SQL is used to talk (ask questions) to the databases.
Also more secure than a spreadsheet.

People and web applications can use SQL to communicate with the databases.
Database Management System (DBMS) is used to handle all of these SQL queries,
including filtering out tainted queries that could negatively affect the database.

Relational database is one or more tables that are related.
Key-Value databases are organized by pairs of keys and values.
Column-Based is grouped by columns.
Graph is about the connections between data points.
Document is stored as entire documents.
The last 4 are known as NOSQL databases, while relational is SQL.


Server -> Database -> Schema -> Table (All can branch into more than 1)
Primary Key: A unique identifier in each row
Value = Cell, stores one type of data in a row given a column

Data Types: Numeric, Text/String, Date and Time

Data Definition Language (DDL): CREATE, ALTER, DROP
Data Manipulation Language (DML): INSERT, UPDATE, DELETE
Data Query Language: SELECT

Query = Question, a SQL query is asking the database a question, the output is the answer.

Why learn SQL?
Needed to talk to data/databases.
High demand, many, many tech jobs list it as a requirement.
Industry Standard.

===============================================================================

[SELECT]

Individual SQL 'keywords' (SELECT, FROM, etc.) are called 'Clauses'

-- Select all columns from Table
SELECT * FROM Table

-- Single line comment
/* 
Multi 
Line
Comment
*/

-- Select by individual columns
SELECT Col1, Col2 [, ColN] FROM Table
-- No comma after last column name!

-- Select given (WHERE) certain condition
SELECT * FROM Table WHERE Column Conditional Value
-- Conditional may be =, >=, >, <, !=, etc.
-- Value may be any data type, as long as column matches data type (Or else warning)

-- Sort data by column (ORDER BY)
SELECT * FROM Table ORDER BY Column [ASC|DESC] [, Column2 [ASC|DESC], ColumnN [ASC|DESC]]
-- ASC = Ascending, default
-- DESC = Descending (Highest first)
-- Can add more columns to sort the sort (If Column contains duplicates, then sorts these by Column2, etc.)
-- Column order is important, sorts sequentially

-- Aggregate data with (GROUP BY)
SELECT [Column, ] AGGR(Column) FROM Table GROUP BY Column
-- AGGR = Aggregation function, COUNT, SUM, etc.
-- For example: SELECT country, SUM(score) FROM customers GROUP BY country;

--Filter data after aggregation with HAVING
SELECT [Column, ] AGGR(Column) FROM Table GROUP BY Column HAVING AGGR(Column) CONDITIONAL Value
-- Example: SELECT country, SUM(score) FROM customers GROUP BY country HAVING SUM(score) > 800;
-- WHERE after FROM, HAVING after GROUP BY
-- Example: SELECT country, SUM(score) FROM customers WHERE score > 400 GROUP BY country HAVING SUM(score) > 800;

-- Filter after select by DISTINCT (Removes duplicates)
SELECT DISTINCT Column FROM Table
-- Example: SELECT DISTINCT country FROM customers;
-- Can slow down query, don't use when not necessary

-- Filter after SELECT by TOP, restrict number of rows returned
SELECT TOP N Column FROM Table
-- !!! MySQL uses LIMIT at end of query instead!
SELECT * FROM Table LIMIT N;
-- Example: SELECT * FROM customers LIMIT 3;

Coding order:

SELECT DISTINCT AGGR(Column1), [Column2, ColumnN] 
FROM Table
WHERE Column CONDITIONAL Value
GROUP BY Column1
HAVING AGGR(Column1) CONDITIONAL Value
ORDER BY Column1 [ASC|DESC][, Column2 [ASC|DESC], ColumnN [ASC|DESC]]
LIMIT N

Execution order:

1. FROM
2. WHERE
3. GROUP BY
4. HAVING
5. SELECT DISTINCT
6. ORDER BY
7. LIMIT

-- Multiple queries
-- Separate with semicolon on MySQL, executes both in order

-- Static (Fixed) Values
SELECT Value AS SomeName

AS = Alias for column name

=============================================================================

[Data Definition Language (DDL): CREATE, ALTER, DROP]

-- Create new table
CREATE TABLE Table (
	Column1 Data_Type Constraint,
	Column2 Data_Type Constraint,
	...
	ColumnN Data_Type Constraint
)

-- Example:
CREATE TABLE persons (
	id int not null,
	person_name varchar(50) not null,
	birth_date date,
	phone varchar(15) not null,
	CONSTRAINT pk_persons PRIMARY KEY (id)
)

-- Show definition of table
DESCRIBE persons;

-- Alter table
ALTER TABLE Table ADD Column Data_Type Constraint

-- Example:
ALTER TABLE persons ADD email varchar(50) not null;

-- Remove column:
ALTER TABLE Table DROP COLUMN Column

-- Example:
ALTER TABLE persons DROP COLUMN email;
-- !!! Drops all data inside column!

-- Remove table:
DROP TABLE Table

-- Example:
DROP TABLE persons;
-- !!! Drops all data inside table!


=============================================================================

[Data Manipulation Language (DML): INSERT, UPDATE, DELETE]

[INSERT]

-- Add rows to table
INSERT INTO Table (Column1[, Column2, ..., ColumnN]) VALUES (Value1[, Value2, ..., ValueN])
-- ! # Of Values must match number of Columns!

--Example:
INSERT INTO customers (id, first_name, country, score) VALUES 
(6, 'Anya', 'Ukraine', NULL),
(7, 'Masha', 'Ukraine', NULL);
-- Facepalm, only need one insert into, no need for one on each line, only the set of values (>_<)

-- ! Order of columns matches order of values!

-- Automatically inserts NULL into unused columns, if no contraint about NULL.
INSERT INTO Table (Column1, Column2, (Exclude other columns)) VALUES (Blah, Blah)

-- Move data from one table to another
INSERT INTO persons (id, person_name, birth_date, phone)
SELECT id, first_name, NULL, 'Unknown' FROM customers

[UPDATE]

UPDATE Table SET Column1 = Value1[, Column2 = Value2, ..., ColumnN = ValueN] [WHERE CONDITION]
-- !!! WHERE clause is optional, but should always be used to avoid updating all rows unintentionally!!

-- If checking for null in conditional, use 'IS NULL', not '= NULL'

[DELETE]

DELETE FROM Table WHERE CONDITION
-- !!! Use WHERE CONDITION or big no-no!!! :O

-- Delete all data from table
DELETE FROM Table;
-- Or, without checking or logging to be faster:
TRUNCATE TABLE Table;

===================================================================

